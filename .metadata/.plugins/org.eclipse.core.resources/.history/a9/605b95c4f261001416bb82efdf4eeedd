# Justin Rohr & Kyle Niewiada
# CIS 343 Project 4
#
# InfixPostfix class contains methods for infix to postfix conversion and
# postfix expression evaluation.

class InfixPostfix
  # converts the infix expression string to postfix expression and returns it
  def infixToPostfix(exprStr)
    Array stack = Array.new
    splitStr = Array.new
    postfixStr = String.new
    splitStr = exprStr.split()
    count = 0;
    str = splitStr[count]
    while (str = splitStr[count]) != nil do
      if operand?(str)
        postfixStr += str + " "
      elsif operator?(str)
        while (stack.length != 0 && stackPrecedence(stack[-1]).to_i >= inputPrecedence(str).to_i) do
          postfixStr += stack.pop().to_s + " "
        end
        stack.push(str)
      elsif rightParen?(str)
        while (!leftParen?(stack[-1]))
          postfixStr += stack.pop().to_s + " "
        end
        str = stack.pop
      end
      count += 1
    end
    while (stack.length != 0) do
      postfixStr += stack.pop + " "
    end
    postfixStr.slice(postfixStr.size - 1)
  end

  # evaluate the postfix string and returns the result
  def evaluatePostfix(exprStr)
    Array stack = Array.new
    splitStr = Array.new
    splitStr = exprStr.split()
    count = 0;
    str = splitStr[count]
    while (str = splitStr[count]) != nil do
      if operand?(str)
        stack.push(str)
      elsif operator?(str)
        y = stack.pop()
        x = stack.pop()
        result = applyOperator(x, y, str)
        stack.push(result)
      end
      count += 1
    end
    stack.pop()
  end

  private # subsequent methods are private methods

  # returns true if the input is an operator and false otherwise
  def operator?(str)
    str == '+' or str == '-' or str == '*' or str == '/' or str == '%' or str == '^' or str == '('
  end

  # returns true if the input is an operand and false otherwise
  def operand?(str)
    !operator?(str) && str != ')'
  end

  # returns true if the input is a left parenthesis and false otherwise
  def leftParen?(str)
    str.eql?'('
  end

  # returns true if the input is a right parenthesis and false otherwise
  def rightParen?(str)
    str.eql?')'
  end

  # returns the stack precedence of the input operator
  def stackPrecedence(operator)
    if operator == '+' or operator == '-'
      return 1
    elsif operator == '*' or operator == '/' or operator == '%'
      return 2
    elsif operator == '^'
      return 3
    elsif operator == '('
      return -1
    end
  end

  # returns the input precedence of the input operator
  def inputPrecedence(operator)
    if operator == '+' or operator == '-'
      return 1
    elsif operator == '*' or operator == '/' or operator == '%'
      return 2
    elsif operator == '^'
      return 4
    elsif operator == '('
      return 5
    end
  end

  # applies the operators to num1 and num2 and returns the result
  def applyOperator(num1, num2, opr)
    if (opr == '+')
      num1.to_i + num2.to_i
    elsif (opr == '-')
      num1.to_i - num2.to_i
    elsif (opr == '*')
      num1.to_i * num2.to_i
    elsif (opr == '/')
      num1.to_i / num2.to_i
    elsif (opr == '%')
      num1.to_i % num2.to_i
    elsif (opr == '^')
      num1.to_i**num2.to_i
    end
  end

end # end InfixPostfix class
