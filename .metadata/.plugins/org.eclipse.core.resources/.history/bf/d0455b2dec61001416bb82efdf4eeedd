# Justin Rohr & Kyle Niewiada
# CIS 343 Project 4
#
# InfixPostfix class contains methods for infix to postfix conversion and
# postfix expression evaluation.

class InfixPostfix
  # converts the infix expression string to postfix expression and returns it
  def infixToPostfix(exprStr)

  end

  # evaluate the postfix string and returns the result
  def evaluatePostfix(exprStr)
    puts
    puts exprStr
    Array stack = Array.new
    splitStr = Array.new
    splitStr = exprStr.split()
    count = 0;
    str = splitStr[count]
    while (str = splitStr[count]) != nil do #str.split(pattern=$;, [limit]) and leaving limit out splits till nil and leaving pattern out splits from ' '
      puts "Str: " +  str
      if operand?(str)
        stack.push(str)
      elsif operator?(str)
        y = stack.pop()
        x = stack.pop()
        result = applyOperator(x, y, str)
        stack.push(result)
      end
      count += 1
    end
    stack.pop()
  end

  private # subsequent methods are private methods

  # returns true if the input is an operator and false otherwise
  def operator?(str)
    str == '+' or str == '-' or str == '*' or str == '/' or str == '%' or str == '^' or str == '('
  end

  # returns true if the input is an operand and false otherwise
  def operand?(str)
    !operator?(str)
  end

  # returns true if the input is a left parenthesis and false otherwise
  def leftParen?(str)
    str == '('
  end

  # returns true if the input is a right parenthesis and false otherwise
  def rightParen?(str)
    str == ')'
  end

  # returns the stack precedence of the input operator
  def stackPrecedence(operator)
    if operator == '+' or operator == '-'
      return 1
    elsif operator == '*' or operator == '/' or operator == '%'
      return 2
    elsif operator == '^'
      return 3
    elsif operator == '('
      return -1
    end
  end

  # returns the input precedence of the input operator
  def inputPrecedence(operator)
    if operator == '+' or operator == '-'
      return 1
    elsif operator == '*' or operator == '/' or operator == '%'
      return 2
    elsif operator == '^'
      return 4
    elsif operator == '('
      return 5
    end
  end

  # applies the operators to num1 and num2 and returns the result
  def applyOperator(num1, num2, opr)
    if (opr == '+')
      num1 + num2
    elsif (opr == '-')
      num1 - num2
    elsif (opr == '*')
      num1 * num2
    elsif (opr == '/')
      num1 / num2
    elsif (opr == '%')
      num1 % num2
    elsif (opr == '^')
      puts "Number 1: " + num1
      puts "Number 2: " + num2
      num1**num2
    end
  end

end # end InfixPostfix class
